# Docker Compose 프로덕션 환경 설정

services:
  # MongoDB 데이터베이스
  mongodb:
    image: mongo:7.0
    container_name: nodetest-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: nodetest
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - nodetest-network

  # Redis 캐시
  redis:
    image: redis:7-alpine
    container_name: nodetest-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nodetest-network

  # RabbitMQ 메시지 큐
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: nodetest-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - nodetest-network

  # 백엔드 서비스
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: nodetest-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      PORT: 3001
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/nodetest?authSource=admin
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://admin:password123@rabbitmq:5672
      JWT_SECRET: your-super-secret-jwt-key-for-production
      JWT_EXPIRES_IN: 24h
      CORS_ORIGIN: http://localhost:3000
      CORS_CREDENTIALS: true
      BCRYPT_SALT_ROUNDS: 12
      PASSWORD_MIN_LENGTH: 6
      USERNAME_MIN_LENGTH: 3
      USERNAME_MAX_LENGTH: 30
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    networks:
      - nodetest-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 프론트엔드 서비스
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: nodetest-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - nodetest-network

# 볼륨 정의
volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local

# 네트워크 정의
networks:
  nodetest-network:
    driver: bridge
